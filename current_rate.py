# -*- coding: utf-8 -*-
"""Тестовое задание.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qzBC-AaNYlAGNgjJIv-C2ZAbDpKm18kG

1. Задание:

Для определения зависимости одной валюты от другой нужно проанализировать движение валют по отдельности за все время. Для анализа курса валют можно использовать популярные биржи, такие как Binance, Coinbase Exchange, Kraken и другие. Во время анализа нужно определить зависимость одной валюты от другой ( прямопропорциональная или обратнопропорциональна), насколько эта зависимость тесна – для этого можно произвести расчеты и выяснить коэффициент корреляции, чем ближе к 0 коэффициент, тем меньше зависимость одной валюты от другой.

2. Задание:

Для работы программы запускайте модули последовательно.

Сначала блок импортов

Затем блок с первой функцией

И в конце блок с второй функцией

Чуть позже добавлю ссылку на телеграмм бота
"""

import time
import requests

def get_eth():
    """Данная функция """
    """API биржи kraken, с которой я вытягиваю данные по актуальной цене ETHUSDT"""
    url = "https://api.kraken.com/0/public/Ticker?pair=ETHUSDT"

    response = requests.get(url)
    """Проверка на работоспособность запроса (если выдает 200, то работает)"""
    print(response)

    data = response.json()
    global price
    price = data['result']['ETHUSDT']['a'][0]

    # print(f"Last ask price for ETH/USDT: {last_ask_price}")
    return float(price)

def check_price():
    """В данной функции идет обращение к предыдущей функции для получения цены в определенный момент времени,
    запись этой стоимости в массив с данными, которые хранятся 60 минут. Чтобы не забивать память программы по истечению 60 минут
    идет удаление ненужных данных"""
    current_price = get_eth()
    prices = [current_price]
    while True:
        time.sleep(1)
        current_price = get_eth()
        """Запись данных в список"""
        prices.append(current_price)
        """Удаление данных из списка"""
        if len(prices) > 3600:
            prices.pop(0)
        price_change = (current_price - prices[0]) / prices[0] * 100
        if abs(price_change) >= 1:
            print(f'Цена изменилась: {price_change:.2f}% за последний час')
        else:
            time.sleep(60)
            print('Цена не выросла более чем на 1% за последний час' )
            print(f"Последняя цена ETH/USDT: {price}")
"""ДЛЯ ПРОВЕРКИ ПРОГРАММЫ В МАКСИМАЛЬНО СЖАТЫЕ СРОКИ МОЖНО ПОМЕНЯТЬ ЗНАЧЕНИЕ timesleep с 60 до 0"""

check_price()